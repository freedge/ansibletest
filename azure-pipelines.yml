# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python38:
      python.version: '3.8'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
    pushd infoblox-ansible/ansible_collections/infoblox/nios_modules ; sed -i "s/^version.*/version: 1.0.0/" ; ansible-galaxy collection build --force ; popd
    ansible-galaxy collection install -r requirements.yml -p ./
    ansible-galaxy role install -r requirements.yml  -p ./
  displayName: 'Install dependencies'

- script: |
    fake-switches &
    cd brosim ; python brosim.py & cd ..
    sleep 1
    ansible-playbook knownhosts.yml || exit -1

    export ANSIBLE_LOG_PATH=~/ansible.log
    #export ANSIBLE_DEBUG=True
    timeout 10 ansible-playbook svc_host.yml
    timeout 10 ansible-playbook network_leaf.yml
    timeout 10 ansible-playbook brocade_zoning.yml
    timeout 10 ansible-playbook pan.yml
    timeout 10 ansible-playbook netapp.yml
    timeout 10 ansible-playbook ilo_dns.yml
    timeout 10 ansible-playbook svc_host.yml --check
    timeout 10 ansible-playbook network_leaf.yml --check
    timeout 10 ansible-playbook brocade_zoning.yml --check
    timeout 10 ansible-playbook netapp.yml --check
    cat ~/ansible.log /tmp/playbook.debug
  displayName: 'test'
